name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 백엔드 빌드 및 테스트
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: tofumaker_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run backend tests
      run: |
        cd backend
        mvn clean test
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/tofumaker_test
        SPRING_DATASOURCE_USERNAME: test
        SPRING_DATASOURCE_PASSWORD: test
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379

    - name: Build backend
      run: |
        cd backend
        mvn clean package -DskipTests

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: backend/target/*.jar

  # 프론트엔드 빌드 및 테스트
  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  # 코드 품질 검사
  code-quality:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # SonarCloud 분석을 위해 전체 히스토리 필요

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and analyze with SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        cd backend
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey=tofumaker \
          -Dsonar.organization=your-org \
          -Dsonar.host.url=https://sonarcloud.io

  # Docker 이미지 빌드 및 푸시
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

  # 배포 (스테이징)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment variables
      run: |
        echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

    - name: Create staging environment file
      run: |
        cp scripts/deploy/env-template-staging.txt .env.staging
        sed -i "s/your-username\/tofumaker/${{ github.repository }}/g" .env.staging
        sed -i "s/IMAGE_TAG=latest/IMAGE_TAG=${{ github.sha }}/g" .env.staging
      env:
        POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.STAGING_REDIS_PASSWORD }}
        JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
        OPENSTACK_AUTH_URL: ${{ secrets.STAGING_OPENSTACK_AUTH_URL }}
        OPENSTACK_USERNAME: ${{ secrets.STAGING_OPENSTACK_USERNAME }}
        OPENSTACK_PASSWORD: ${{ secrets.STAGING_OPENSTACK_PASSWORD }}
        OPENSTACK_PROJECT_NAME: ${{ secrets.STAGING_OPENSTACK_PROJECT_NAME }}

    - name: Deploy to staging
      run: |
        chmod +x scripts/deploy/deploy-staging.sh
        ./scripts/deploy/deploy-staging.sh
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 배포 (프로덕션)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment variables
      run: |
        echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

    - name: Create production environment file
      run: |
        cp scripts/deploy/env-template-production.txt .env.production
        sed -i "s/your-username\/tofumaker/${{ github.repository }}/g" .env.production
        sed -i "s/IMAGE_TAG=latest/IMAGE_TAG=${{ github.sha }}/g" .env.production
      env:
        POSTGRES_PASSWORD: ${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.PRODUCTION_REDIS_PASSWORD }}
        JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
        OPENSTACK_AUTH_URL: ${{ secrets.PRODUCTION_OPENSTACK_AUTH_URL }}
        OPENSTACK_USERNAME: ${{ secrets.PRODUCTION_OPENSTACK_USERNAME }}
        OPENSTACK_PASSWORD: ${{ secrets.PRODUCTION_OPENSTACK_PASSWORD }}
        OPENSTACK_PROJECT_NAME: ${{ secrets.PRODUCTION_OPENSTACK_PROJECT_NAME }}

    - name: Create backup directory
      run: mkdir -p backups

    - name: Deploy to production
      run: |
        chmod +x scripts/deploy/deploy-production.sh
        ./scripts/deploy/deploy-production.sh
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        MONITORING_WEBHOOK_URL: ${{ secrets.MONITORING_WEBHOOK_URL }}

  # 성능 테스트
  performance-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: tofumaker_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and start backend
      run: |
        cd backend
        mvn clean package -DskipTests
        java -jar target/*.jar --spring.profiles.active=test &
        echo $! > backend.pid
        
        # Wait for application to start
        for i in {1..30}; do
          if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
            echo "Backend is ready"
            break
          fi
          echo "Waiting for backend to start... ($i/30)"
          sleep 10
        done

    - name: Install Apache Bench
      run: sudo apt-get update && sudo apt-get install -y apache2-utils bc

    - name: Run performance tests
      run: |
        chmod +x scripts/performance/load-test.sh
        ./scripts/performance/load-test.sh http://localhost:8080 5 100 30

    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: scripts/performance/results/

    - name: Stop backend
      if: always()
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
          rm backend.pid
        fi

  # 보안 스캔
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif' 