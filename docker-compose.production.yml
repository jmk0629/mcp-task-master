version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:13
    container_name: tofumaker-postgres-prod
    environment:
      POSTGRES_DB: tofumaker_production
      POSTGRES_USER: tofumaker_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    ports:
      - "5434:5432"
    networks:
      - tofumaker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tofumaker_user -d tofumaker_production"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: tofumaker-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6381:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - tofumaker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # 백엔드 애플리케이션
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY}-backend:${IMAGE_TAG:-latest}
    container_name: tofumaker-backend-prod
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/tofumaker_production
      SPRING_DATASOURCE_USERNAME: tofumaker_user
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      OPENSTACK_AUTH_URL: ${OPENSTACK_AUTH_URL}
      OPENSTACK_USERNAME: ${OPENSTACK_USERNAME}
      OPENSTACK_PASSWORD: ${OPENSTACK_PASSWORD}
      OPENSTACK_PROJECT_NAME: ${OPENSTACK_PROJECT_NAME}
      OPENSTACK_USER_DOMAIN_NAME: ${OPENSTACK_USER_DOMAIN_NAME}
      OPENSTACK_PROJECT_DOMAIN_NAME: ${OPENSTACK_PROJECT_DOMAIN_NAME}
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: WARN
      JAVA_OPTS: "-Xms512m -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tofumaker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 30s
        failure_action: pause
        order: stop-first

  # 프론트엔드 애플리케이션
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY}-frontend:${IMAGE_TAG:-latest}
    container_name: tofumaker-frontend-prod
    environment:
      REACT_APP_API_URL: https://api.tofumaker.com/api
      REACT_APP_ENVIRONMENT: production
    ports:
      - "443:80"
      - "80:80"
    depends_on:
      - backend
    networks:
      - tofumaker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first

  # Nginx 리버스 프록시 (프로덕션용)
  nginx:
    image: nginx:alpine
    container_name: tofumaker-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - tofumaker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  tofumaker-network:
    driver: bridge 