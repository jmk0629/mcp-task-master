input {
  beats {
    port => 5044
  }
  
  # 애플리케이션 로그 파일 직접 읽기
  file {
    path => "/var/log/tofumaker/application.log"
    start_position => "beginning"
    type => "application"
    codec => multiline {
      pattern => "^\d{4}-\d{2}-\d{2}"
      negate => true
      what => "previous"
    }
  }
}

filter {
  if [type] == "application" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:level} %{DATA:logger} - %{GREEDYDATA:log_message}" 
      }
    }
    
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
    }
    
    # 로그 레벨별 태그 추가
    if [level] == "ERROR" {
      mutate {
        add_tag => [ "error" ]
      }
    } else if [level] == "WARN" {
      mutate {
        add_tag => [ "warning" ]
      }
    }
    
    # 스택 트레이스 감지
    if [log_message] =~ /Exception|Error|Caused by/ {
      mutate {
        add_tag => [ "exception" ]
      }
    }
  }
  
  # Docker 컨테이너 로그 처리
  if [container] {
    mutate {
      add_field => { "service" => "%{[container][name]}" }
    }
  }
  
  # 공통 필드 추가
  mutate {
    add_field => { "environment" => "production" }
    add_field => { "application" => "tofumaker" }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "tofumaker-logs-%{+YYYY.MM.dd}"
    template_name => "tofumaker"
    template_pattern => "tofumaker-*"
    template => {
      "index_patterns" => ["tofumaker-*"],
      "settings" => {
        "number_of_shards" => 1,
        "number_of_replicas" => 0
      },
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" },
          "level" => { "type" => "keyword" },
          "logger" => { "type" => "keyword" },
          "thread" => { "type" => "keyword" },
          "service" => { "type" => "keyword" },
          "environment" => { "type" => "keyword" },
          "application" => { "type" => "keyword" },
          "log_message" => { "type" => "text" }
        }
      }
    }
  }
  
  # 디버깅용 stdout 출력 (필요시 주석 해제)
  # stdout { codec => rubydebug }
} 